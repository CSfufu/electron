name: CI Packaging Electron App

on:
  push:
    branches:
      - main # Or your default branch
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    strategy:
      fail-fast: false # Keep running other jobs even if one fails
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        # To build for specific architectures like arm64 for mac,
        # you might need to adjust electron-builder flags or use specific runners.
        # For now, this builds default arch for each OS.

    runs-on: ${{ matrix.os }}
    permissions:
      contents: read # Read access to checkout code

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Or your preferred LTS Node.js version (e.g., 18, 20)
        cache: 'npm'

    - name: Install dependencies
      run: npm ci # 'ci' is generally preferred for CI for clean, reproducible installs

    - name: Build Electron app
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          npm run build:app -- --linux
        elif [ "$RUNNER_OS" == "macOS" ]; then
          npm run build:app -- --mac
        elif [ "$RUNNER_OS" == "Windows" ]; then
          npm run build:app -- --win
        fi
      env:
        # IMPORTANT: For code signing (recommended for production builds):
        # You'll need to configure these secrets in your GitHub repository settings
        # (Settings > Secrets and variables > Actions > New repository secret)
        # GH_TOKEN is automatically available if you need electron-builder to publish to GitHub Releases itself (though we do it manually later)
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # For macOS signing & notarization (replace with your actual secret names)
        # CSC_LINK: ${{ secrets.MAC_CSC_LINK }} # .p12 certificate base64 encoded
        # CSC_KEY_PASSWORD: ${{ secrets.MAC_CSC_KEY_PASSWORD }}
        # APPLE_ID: ${{ secrets.APPLE_ID }}
        # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }} # App-specific password
        # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        # For Windows signing (replace with your actual secret names)
        # WIN_CSC_LINK: ${{ secrets.WINDOWS_CSC_LINK }} # .pfx certificate base64 encoded
        # WIN_CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CSC_KEY_PASSWORD }}

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-desktop-app-${{ matrix.os }} # e.g., my-desktop-app-macos-latest
        path: release/ # Upload the entire 'release' directory generated by electron-builder
        if-no-files-found: error # Fails the workflow if 'release' directory is empty or not found

  create-release:
    if: startsWith(github.ref, 'refs/tags/v') # Only run for tags like v1.0.0
    needs: build # Run after all 'build' jobs for different OS are successful
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create releases and upload release assets

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # All artifacts downloaded into 'artifacts/' directory
                          # Each OS build will be in a subdirectory named after the artifact name
                          # e.g., artifacts/my-desktop-app-macos-latest/release/(files...)

      - name: List downloaded files (for debugging)
        run: |
          ls -R artifacts
          echo "Tag being released: ${{ github.ref_name }}"

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, has permissions to write to repo
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}.
            Application built to load: http://localhost:8001
            (Further release notes can be added here)
          draft: false      # Set to true to create a draft release
          prerelease: false # Set to true if this is a pre-release
          files: |
            artifacts/my-desktop-app-macos-latest/release/MyApp*.dmg
            artifacts/my-desktop-app-macos-latest/release/MyApp*.zip
            artifacts/my-desktop-app-windows-latest/release/MyApp*Setup*.exe
            artifacts/my-desktop-app-windows-latest/release/MyApp*.zip
            artifacts/my-desktop-app-ubuntu-latest/release/MyApp*.AppImage
            # Add any other files like .blockmap if needed